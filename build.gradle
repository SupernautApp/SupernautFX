plugins {
    id 'org.asciidoctor.jvm.convert'        version '4.0.4'
    id 'org.ajoberstar.git-publish'         version '3.0.0'
    id 'org.openjfx.javafxplugin'           version '0.1.0'  apply false
    id 'org.beryx.jlink'                    version '3.1.4-rc' apply false
    id 'com.github.hierynomus.license'      version '0.16.1' apply false
}

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

rootProject.ext.signJPackageImages = signJPackageImages.toBoolean() // create boolean in ext from property string
logger.warn "rootProject.ext.signJPackageImages = ${rootProject.ext.signJPackageImages}"

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'

    version = supernautVersion     // set in gradle.properties
    group = 'app.supernaut'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation "org.spockframework:spock-core:${spockVersion}"
        testImplementation "org.apache.groovy:groovy:${groovyVersion}"

        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testRuntimeOnly "net.bytebuddy:byte-buddy:1.11.20"                 // allows Spock to mock classes (in addition to interfaces)
        testRuntimeOnly "org.objenesis:objenesis:3.2"                     // Allow Spock to mock classes with constructor arguments
        testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"           // Runtime implementation of slf4j
    }

    java {
        toolchain {
            // `languageVersion` is used to configure the "Java Toolchain" used for the build. This includes `javac`,
            // `jlink`, and the `jpackage` tool.
            //  See `gradle.properties` for the setting of `javaToolchainVersion` and other setting that are used
            // to find and/or download JDK versions.
            languageVersion = JavaLanguageVersion.of(javaToolchainVersion)
            vendor = JvmVendorSpec.matching(javaToolchainVendor)
        }
        withJavadocJar()
        withSourcesJar()
    }

    compileJava {
        options.release = 17
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    test {
        useJUnitPlatform()          // We're using Spock 2.0 and JUnit 5
    }
}

apply from: 'gradle/licenseCheck.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'
apply from: 'gradle/maven-publish.gradle'

tasks.register('testReport', TestReport) {
    // Include the results from the `test` task in all subprojects
    destinationDirectory = layout.buildDirectory.dir("reports/allTests")
    testResults.from(subprojects.collect { it.tasks.withType(Test) })
}

build.dependsOn subprojects.build

tasks.register('buildCI') {
    dependsOn build, testReport,
            mergedJavadoc,
            subprojects.collect { it.tasks.matching { it.name == 'jlink'} }
}

tasks.register('buildJPackages') {
    dependsOn buildCI, subprojects.collect { it.tasks.matching { it.name == 'jpackage'} }
}

/**
 * Massage the version string based upon the current OS to be valid
 * for the installer platforms for that OS. rpmbuild, MSI, and potentially
 * others have restrictions on valid version strings.
 *
 * @param appVersion A typical Gradle version string
 * @return a version string that should work for the currrent platform
 */
String normalizeAppVersion(final String appVersion) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.linux) {
        // Replace '-' with '.' for rpmbuild
        return appVersion.replace('-', '.')
    } else if (os.windows) {
        // This is a hack attempt to assure the version conforms to MSI productVersion string rules
        // See https://docs.microsoft.com/en-us/windows/win32/msi/productversion
        // For now, we'll just remove '-SNAPSHOT' if present.
        return appVersion.replaceAll('-SNAPSHOT$', '')
    } else {
        return appVersion.replaceAll('-SNAPSHOT$', '')
    }
}
