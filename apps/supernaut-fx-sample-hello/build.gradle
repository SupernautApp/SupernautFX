plugins {
    id 'application'
}

apply plugin: "org.openjfx.javafxplugin"
apply plugin: "org.beryx.jlink"

def appName = 'SupernautFX Hello'
version = helloAppVersion

application {
    mainModule = 'app.supernaut.fx.sample.hello'
    mainClass = 'app.supernaut.fx.sample.hello.HelloApp'
}

dependencies {
    implementation project (':modules:app.supernaut.fx')
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    implementation "jakarta.inject:jakarta.inject-api"
    implementation "io.micronaut:micronaut-inject:${micronautVersion}"   // For Micronaut annotations eg. @Factory and generated code

    annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"

    runtimeOnly project (':modules:app.supernaut.fx.micronaut')         // Implementation of FxLauncher
    runtimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    constraints {
        implementation('jakarta.inject:jakarta.inject-api:[2.0.1,)') {
            because '2.0.1 is the first modular version, force Micronaut to use it'
        }
    }
}

// Workaround for https://github.com/SupernautApp/SupernautFX/issues/6
modularity.disableEffectiveArgumentsAdjustment()

javafx {
    version = javaFxVersion
    modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

run {
    moduleOptions {
        addModules = ['app.supernaut.fx.micronaut']
    }
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}

def os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--add-modules', 'app.supernaut.fx.micronaut,org.slf4j.jul']
    launcher {
        name = appName
        jvmArgs = []
    }
    mergedModule {
        requires 'org.slf4j'
        requires 'jakarta.inject'
        requires 'jakarta.annotation'
    }
    jpackage {
        // See https://badass-jlink-plugin.beryx.org/releases/latest/#_jpackage for
        // where the plugin's jpackage task finds the path to the jpackage tool by default
        skipInstaller = false

        // Which installers to make
        if (os.linux) {
            installerType = null            // default is ['rpm', 'deb']
        } else if (os.macOsX) {
            installerType = 'dmg'           // default is ['pkg', 'dmg']
        } else if (os.windows) {
            installerType = 'exe'           // default is ['exe', 'msi']
        }

        // Massage version string to be compatible with jpackage installers
        // for the current OS platform
        def appVersionForJpackage = normalizeAppVersion(version)

        imageOptions = ["--verbose", "--app-version", appVersionForJpackage]
        installerOptions = ["--app-version", appVersionForJpackage]
        if (os.macOsX) {
            imageOptions += [ '--resource-dir', "${projectDir}/src/macos/resource-dir" ]
            if (rootProject.ext.signJPackageImages) {
                logger.warn "Setting --mac-sign in jpackage imageOptions"
                imageOptions += [ '--mac-sign' ]
            }
        } else if (os.windows) {
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        }

    }
}
